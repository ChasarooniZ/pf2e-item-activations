import { ITEM_LIST } from "./item-list.js";
import { MODULE_ID, setModuleFlag } from "./misc.js";
import { augmentAction } from "./on-create.js";
import { actionStyling } from "./style-item.js";

export const marker = '[X]';

export function activateAction(action) {
    let outputAction = action;
    outputAction = setModuleFlag(action, 'enabled', true);
    outputAction.name = action.name.replaceAll(marker, '').trim();
    return outputAction;
}

export function deactivateAction(action) {
    let outputAction = action;
    outputAction = setModuleFlag(action, 'enabled', false);
    outputAction.name = marker.concat(' ', action.name.replaceAll(marker, '').trim())
    return outputAction;
}

/**
 * Turns on or Off activations for a particular item
 * @param {*} item 
 * @param {'On' | 'Off' | 'None'} changeType 
 */
export async function turnOnOffActivation(item, changeType) {
    const actor = item.actor;
    const id = item.id;
    let existingActions = actor.items.find(it =>
        it?.flags?.[MODULE_ID]?.grantedBy._id === id
    );
    if (changeType === 'On') {
        if (existingActions.length === 0) {
            const activations = [];
            if (ITEM_SLUGS.includes(slug)) {//Custom Built
                for (const actionUuid in ITEM_LIST[slug].actions) {
                    let action = await fromUuid(actionUuid);
                    action = action.toObject()
                    action = augmentAction(action, item)
                    activations.push(action)
                }
            } else { //autogenerated
                activations.concat(generateActivations(item).map(act => augmentAction(act, item)))
            }
            await actor.createEmbeddedDocuments("Item", activations);
        }
        const actions = existingActions || actor.items.find(it =>
            it?.flags?.[MODULE_ID]?.grantedBy._id === id
        );

        const nameIds = actions.map(action => ({
            _id: action.id,
            name: activateAction(action).name
        }))
        await actor.updateEmbeddedDocuments("Item", nameIds);

    } else if (changeType === 'Off') {
        await actor.updateEmbeddedDocuments("Item", existingActions.map(action => ({
            _id: action._id,
            name: deactivateAction(action).name
        })));
        actionStyling(actor);
    }
}